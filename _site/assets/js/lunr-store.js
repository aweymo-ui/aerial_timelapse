var store = [ 
    
    
    { 
        "url": "/aerial_timelapse/content/1_intro.html",
        "title": "Introduction",
        "text": "Hello, my name is Andrew Weymouth and I work at the University of Idaho Library as the Digital Initiatives Librarian in the Center for Digital Inquiry and Learning (CDIL) department. My work generally consists of creating and maintaining our digital collections, helping to rethink processes and introducing new digital scholarship tools to the department. &#10042; The short talk that I will be giving today is a part of a larger workshop I created for the 2024 Information Landscapes series on using geolocation tools to identify archival photographs that lack location metadata. While I am in no way an expert in GIS, my work in digital scholarship regularly has me jumping into various fields and experimenting with them to see if they could be useful to a broader range of student and faculty researchers. With this in mind, I hope this survey is a helpful insight of an outsider’s perspective on the strengths and challenges of aerial time lapse applications at this point in time."
    },
    { 
        "url": "/aerial_timelapse/content/2_platform.html",
        "title": "Platform Comparison",
        "text": "For this survey, I tested each platform by attempting to create an aerial time-lapse of Moscow, focusing on the longest chronological coverage, highest fidelity, and other helpful features like displaying the dataset used and photo dates for viewer reference. &#10042; Here are a few freely available resources and their different strengths and weaknesses, beginning with platforms with non-functioning elements or difficult to navigate interfaces: Platform Strengths Weaknesses Directions Google Earth Pro This desktop version of Google Earth where some older online references will point you towards to create aerial time lapse videos, but this appears to be an outdated model that Google seems to have abandoned for more contemporary platforms Specifically, the “Movie Maker” tool that would carry out this action no longer appears to be functional USGS Earth Explorer This database contains material that predates many of the other resources, sometimes as far back as 1950, whereas the other platforms only reach as far back as 1980. Because only still images can be exported, the time lapse functions need to be done manually in another application like Adobe Premier or AfterEffects Additionally, as an outsider to GIS, I found the interface unintuitive as well as some of the semantics, including the \"footprints\" for boundaries and coverage areas, \"scenes\" for individual images and \"cart\" for the download list even though most of the them are free to use for non-profit purposes. Google Earth Very simple to use Good date range, reaching all the way back to 1984 in this example task Very poor fidelity No video export functionality Enter your location Select the Layers button on the bottom left hand of the screen Toggle the time lapse button Adjust speed as wanted Screen capture to create video ArcGIS World Imagery Wayback Better fidelity Even more intuitive controls Historical reach isn’t very far; only about 10 years in this test Enter location Press the play button and adjust speed as desired Export video directly or upload to cloud Google Earth Engine Because the platform runs on whatever Javascript code you create, the platform is a complete sandbox of possibilities where you can create still, moving or interactive maps Utilizes over 1000 public datasets Good documentation, example code and active community Easy exporting directly into Drive folders Requires knowledge of coding and, even still, can be very difficult and time consuming to iterate code depending on project needs Possibly because of the breadth of material, one frequently encounters errors occurring from combining datasets with differing digital color values, differing metadata and incomplete images Discussed in the following section! &#10042;"
    },
    { 
        "url": "/aerial_timelapse/content/3_gee.html",
        "title": "Google Earth Engine",
        "text": "Like the USGS Earth Explorer, you’ll need to sign a waiver confirming that you’ll use the resource for non-profit purposes, but you should gain near-immediate access after signing. The interface resembles a text editor: the left pane displays the scripts you’ve written, along with documentation and examples of code you can plug in to test the platform. The center pane is where you write and run your code, while the right pane features a console that functions as a terminal, displaying error messages and printing data after running the script. The task pane lists the scripts you’ve run along with their status. &#10042; Here’s the code I developed to create a time lapse over Moscow, covering the longest possible time span. // Define the center of the 83843 area code in Moscow, Idaho var moscowCenter = ee.Geometry.Point([-117.0028, 46.7326]); // Approximate center of 83843 // Define a square boundary around Moscow, covering an area of interest (e.g., 5 square miles ~ 12.95 square km) var moscowBoundary = moscowCenter.buffer(1810).bounds(); // 1810 meters radius approximates a 5 square mile area // Load the ImageCollection and filter by the defined area var collection = ee.ImageCollection('USDA/NAIP/DOQQ') .filterBounds(moscowBoundary) .sort('system:time_start'); To start, we define our geographic perimeter around the Moscow area code. Next, we will specify the dataset to use for creating this visualization. Here we are focusing solely on the National Agriculture Imagery Program dataset, which goes back to around 1980 and we are doing this due to the many errors I encountered previously attempting to chain together datasets to increase the time frame. // Get the earliest image var earliestImage = collection.first(); var earliestDate; if (earliestImage) { earliestDate = ee.Date(earliestImage.get('system:time_start')).format('YYYY-MM-dd').getInfo(); print('Earliest Available Date:', earliestDate); // Define the updated date range var startDate = earliestDate; // Use earliest date found var endDate = '2024-06-01'; // End date // Filter the ImageCollection with the updated date range collection = collection.filterDate(startDate, endDate); // Function to get the image with the largest area for each year var getLargestImagePerYear = function(year) { var yearlyCollection = collection.filter(ee.Filter.calendarRange(year, year, 'year')); // Compute the intersection of each image with the boundary and calculate area var largestImage = yearlyCollection.map(function(image) { var intersection = image.geometry().intersection(moscowBoundary, 1); // Added error margin of 1 meter return image.set({'intersectionArea': intersection.area()}); }).sort('intersectionArea', false).first(); // Sort by area and get the largest return largestImage; }; // Get the years from the collection var years = ee.List(collection.aggregate_array('system:time_start')) .map(function(date) { return ee.Date(date).get('year'); }).distinct(); // Map over years to get the largest image per year var largestImagesCollection = ee.ImageCollection(years.map(getLargestImagePerYear)) .sort('system:time_start'); // Ensure chronological order Moving ahead, I encountered another complication: not all satellite photographs that capture parts of the area offer complete coverage, leaving distracting gaps in some of the earlier iterations of the code. To address this, I adjusted to request only the largest image for each year, ensuring optimal coverage and a better yield of images. A little farther down in the script, we are assembling these images chronologically, from earliest to most recent, and compiling them into a video form for export in red, green, and blue (RGB) color formatting. // Function to prepare images for video export and add date metadata var prepareForExport = function(image) { var date = ee.Date(image.get('system:time_start')).format('YYYY-MM-dd'); // Visualize the image with appropriate bands and scale var visualImage = image.visualize({ bands: ['R', 'G', 'B'], min: 0, max: 255 }); // Annotate the image with the date (add metadata) return visualImage.set({'date': date}); }; // Apply the function to the largest images collection var annotatedCollection = largestImagesCollection.map(prepareForExport); // Print dates of all images to the console in chronological order annotatedCollection.aggregate_array('date').evaluate(function(dates) { print('Image Dates:', dates); }, function(error) { print('Error:', error); }); Ideally, I wanted to create code that would automatically overlay the date information onto each photograph, providing viewers with a better frame of reference. However, the best I could achieve was to have this metadata “printed” in the console when the script runs. &#10042; This data can then be easily added to the frames using video editing software like Adobe Premiere. // Define video export parameters with increased display time var videoParams = { region: moscowBoundary, dimensions: 900, // Adjust as needed crs: 'EPSG:3857', framesPerSecond: 0.5, // Increase time on screen to 2 seconds per image description: 'Moscow_TimeLapse', folder: 'EarthEngine' }; // Export the video Export.video.toDrive({ collection: annotatedCollection, description: videoParams.description, folder: videoParams.folder, dimensions: videoParams.dimensions, framesPerSecond: videoParams.framesPerSecond, crs: videoParams.crs, region: videoParams.region }); } else { print('No images found within the specified boundary.'); } Finally, one of the convenient things about working with Google Earth Engine is that you can export videos, images and interactive maps you create directly into your Google Drive account. These exported video files can be converted into GIFs and loaded onto project sites like we see on the following page. &#10042;"
    },
    { 
        "url": "/aerial_timelapse/content/4_outcomes.html",
        "title": "Output & Conclusion",
        "text": "Gif of Google Earth time lapse over Moscow, Idaho demonstrating lower fidelity. Gif of ArcGIS World Imagery time lapse over Moscow, Idaho, demonstrating improved fidelity but shortened, more contemporary time span. Gif of Google Earth Engine time lapse over Moscow, Idaho, demonstrating improved fidelity and increased time span but difficulty of framing due to the variety of datasets. Conclusion I hope this has been an insightful comparison of these platforms and their various strengths and weaknesses. For those needing a tool with around 15 years of coverage, I highly recommend the intuitive ArcGIS World Imagery Wayback platform. &#10042; That said, I am personally very interested in creating more work in Google Earth Engine and the seemingly limitless ability you have to produce still, moving and interactive maps. I also feel like I may missing some central concepts of the code that would weed out so many of the false positives, incomplete images and datasets with conflicting color configurations that complicated my first interactions with the platform. Thank you for your time and feel free to reach out if you have any questions about this survey."
    },
    { 
        "url": "/aerial_timelapse/",
        "title": "Home",
        "text": "Presentation Transcript and Slides for the 2024 U of I GIS Day Series slides Contents: Introduction Platform Comparison Google Earth Engine Output &amp; Conclusion Content: CC BY-NC-ND 4.0 Andrew Weymouth 2024 (get source code). Theme: Variation on workshop-template-b by evanwill"
    }];
